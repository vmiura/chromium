// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module cc.mojom;

import "cc/ipc/begin_frame_args.mojom";
import "cc/ipc/content_frame.mojom";
import "cc/ipc/layer_tree_settings.mojom";
import "cc/ipc/renderer_capabilities.mojom";
import "cc/ipc/surface_id.mojom";
import "cc/ipc/surface_sequence.mojom";
import "cc/ipc/image_decode.mojom";
import "gpu/ipc/common/surface_handle.mojom";
import "ui/gfx/geometry/mojo/geometry.mojom";

// Renderer to Browser
interface DisplayCompositorHost {
  // TODO(fsamuel): There should be one channel per process.
  // Maybe the routing ID ("client ID") is part of the Compositor,
  // and not the CompositorChannel.
  CreateCompositorChannel(CompositorChannel& compositor_channel);
                    
  CreateCompositor(int32 routing_id,
                   cc.mojom.LayerTreeSettings settings,
                   Compositor& compositor,
                   CompositorClient client);
};

// GPU to browser.
interface DisplayCompositorClient {
};

// This is the main interface that the DisplayCompositor host uses
// to connect to the Display Compositor service.
interface DisplayCompositorFactory {
  CreateDisplayCompositor(DisplayCompositor& display_compositor,
                          DisplayCompositorClient display_compositor_client);
};

// Browser to GPU
interface DisplayCompositor {
  CreateCompositorChannel(CompositorChannel& channel);

  CreateCompositor(uint32 client_id,
                   gpu.mojom.SurfaceHandle widget,
                   cc.mojom.LayerTreeSettings settings,
                   Compositor& compositor,
                   CompositorClient client);
};

interface CompositorChannel {
  AddRefOnSurfaceId(cc.mojom.SurfaceId id);
  MoveTempRefToRefOnSurfaceId(cc.mojom.SurfaceId id);
};

interface Compositor {
  RegisterChildCompositor(uint32 client_id);
  UnregisterChildCompositor(uint32 client_id);
  SatisfySequence(SurfaceSequence sequence);
  SetNeedsBeginMainFrame();
  SetNeedsRedraw(gfx.mojom.Rect damage_rect);
  SetVisible(bool visible);
  BeginMainFrameAborted(cc.mojom.CommitEarlyOutReason reason);
  PrepareCommit(bool will_wait_for_cativation, ContentFrame frame);
  [Sync] PrepareCommitSync(bool will_wait_for_cativation, ContentFrame frame) => (cc.mojom.SurfaceId surface_id);
  [Sync] WaitForActivation() => ();
  [Sync] Destroy() => ();
};

interface CompositorClient {
  OnCompositorCreated(uint32 client_id);
  OnBeginMainFrame(uint32 begin_frame_id, BeginFrameArgs args);
  OnBeginMainFrameNotExpectedSoon();
  OnDidCompletePageScaleAnimation();
  OnDidCommitAndDrawFrame();
  OnDidCompleteSwapBuffers(SurfaceId surface_id);
  OnRendererCapabilities(RendererCapabilities capabilities);
  OnImageDecodeProxyCreated(ImageDecode& decode);
};
