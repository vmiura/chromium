// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module cc.mojom;

import "cc/ipc/begin_frame_args.mojom";
import "cc/ipc/content_frame.mojom";
import "cc/ipc/layer_tree_settings.mojom";
import "cc/ipc/renderer_capabilities.mojom";
import "cc/ipc/surface_id.mojom";
import "cc/ipc/surface_sequence.mojom";
import "cc/ipc/image_decode.mojom";
import "gpu/ipc/common/surface_handle.mojom";
import "ui/gfx/geometry/mojo/geometry.mojom";

// This is the main interface that the DisplayCompositor host uses
// to connect to the Display Compositor service.
interface DisplayCompositorFactory {
  CreateDisplayCompositor(DisplayCompositor& display_compositor,
                          DisplayCompositorClient display_compositor_client);
};

// GPU to browser/window server ("display compositor host").
interface DisplayCompositorClient {
  OnSurfaceCreated(gfx.mojom.Size frame_size, cc.mojom.SurfaceId surface_id);
};

// Browser or Window Server ("display compositor host") to GPU
interface DisplayCompositor {
  AddRefOnSurfaceId(cc.mojom.SurfaceId id);

  MoveTempRefToRefOnSurfaceId(cc.mojom.SurfaceId id);

  // TODO(fsamuel): the thing I don't like about this API is it's not tied to an
  // existing FrameSink, and so it's inherently racy. If we try to create a
  // hierarchy before the sinks are ready then we may fail. If instead this is
  // tied to the FrameSink connection, then we cannot race by definition because
  // parent already has a Content/CompositorFrameSink.
  // However, if we put this API on Content/CompositorFrameSink, then we expose
  // a detail that arguably clients shouldn't manage. Perhaps we can instead
  // give the display compositor host a private interface.
  RegisterClientHierarchy(CompositorFrameSinkId parent_client_id,
                          CompositorFrameSinkId child_client_id);

  UnregisterClientHierarchy(CompositorFrameSinkId parent_client_id,
                            CompositorFrameSinkId child_client_id);

  // A ContentFrameSink (and, similarly, this would apply for
  // CompositorFrameSink) is uniquely identified by two 32-bit quantities:
  // |client_id| and |sink_id|. |client_id| is a display compositor host
  // allocated ID that uniquely identifies a DisplayCompositorHost connection.
  // In Chrome, this is the RenderProcessHost ID. |sink_id| is a
  // client-allocated ID that uniquely identifies a sink for a given
  // DisplayCompositorHost connection. In Chrome, this is the routing ID.
  // TODO(fsamuel): We may wish to create more than one sink per view, and so
  // it might be useful to make the sink_id a 64-bit quantity.
  CreateContentFrameSink(uint32 client_id,
                         int32 sink_id,
                         gpu.mojom.SurfaceHandle widget,
                         cc.mojom.LayerTreeSettings settings,
                         ContentFrameSink& content_frame_sink,
                         ContentFrameSinkClient content_frame_sink_client);
};

// Unprivileged DisplayCompositor API for clients implemented by the browser (on
// the IO thread) or window server.
interface DisplayCompositorHost {
  // There is a fixed client_id for a DisplayCompositorHost connection and thus
  // clients of this connection cannot allocate a new client_id.
  CreateContentFrameSink(int32 sink_id,
                         cc.mojom.LayerTreeSettings settings,
                         ContentFrameSink& content_frame_sink,
                         ContentFrameSinkClient content_frame_sink_client);
};

// This is a privileged API is used by the browser ONLY to allow creating
// onscreen ContentFrameSinks, and to add / convert refs on surface IDs. These
// private APIs ought not be necessary for Chrome in Mus+Ash. In Mus+Ash, Chrome
// delegates window creation to the Mus window server which has access to the
// privileged display compositor API.
interface DisplayCompositorHostPrivate {
  AddRefOnSurfaceId(cc.mojom.SurfaceId id);

  MoveTempRefToRefOnSurfaceId(cc.mojom.SurfaceId id);

  RegisterClientHierarchy(CompositorFrameSinkId parent_client_id,
                          CompositorFrameSinkId child_client_id);

  UnregisterClientHierarchy(CompositorFrameSinkId parent_client_id,
                            CompositorFrameSinkId child_client_id);

  CreateContentFrameSinkWithHandle(
      int32 sink_id,
      gpu.mojom.SurfaceHandle widget,
      cc.mojom.LayerTreeSettings settings,
      ContentFrameSink& content_frame_sink,
      ContentFrameSinkClient content_frame_sink_client);
};

// ContentFrameSinkPrivate is used by the display compositor host to set up
// BeginFrameSource hierarchies. This API lives in SurfaceManager but is called
// from here in order to ensure that hierarchy registration does not race with
// ContentFrameSink creation.
interface ContentSinkSinkPrivate {
  RegisterChildSink(CompositorFrameSinkId child_client_id);

  UnregisterChildSink(CompositorFrameSinkId child_client_id);
};

// A ContentFrameSink corresponds to a LTH=>LTHI interface.
interface ContentFrameSink {
  SetNeedsBeginMainFrame();
  SetNeedsRedraw(gfx.mojom.Rect damage_rect);
  SetVisible(bool visible);
  BeginMainFrameAborted(cc.mojom.CommitEarlyOutReason reason);
  PrepareCommit(bool will_wait_for_cativation, ContentFrame frame);
  [Sync] PrepareCommitSync(bool will_wait_for_cativation, ContentFrame frame) =>
      (cc.mojom.SurfaceId surface_id);
  [Sync] WaitForActivation() => ();
  DeleteBackings(array<uint32> backings);
  [Sync] Destroy() => ();
};

// A ContentFrameSinkClient corresponds to a LTHI=>LTH interface.
interface ContentFrameSinkClient {
  OnCompositorCreated(CompositorFrameSinkId compositor_frame_sink_id);
  OnBackingsReturned(array<uint32> backings);
  OnBeginMainFrame(uint32 begin_frame_id, BeginFrameArgs args);
  OnBeginMainFrameNotExpectedSoon();
  OnDidCompletePageScaleAnimation();
  OnDidCommitAndDrawFrame();
  OnDidCompleteSwapBuffers(SurfaceId surface_id);
  OnRendererCapabilities(RendererCapabilities capabilities);
  OnImageDecodeProxyCreated(ImageDecode& decode);
};
